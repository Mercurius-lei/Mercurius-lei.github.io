<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>算法基础</title>
    <url>/2023/09/25/algorithm_base/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>todo</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/2023/09/25/database_%20elasticsearch/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql优化</title>
    <url>/2023/09/25/database_%20optimize/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/09/25/database_mysql/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>常用设计模式</title>
    <url>/2023/09/25/design_pattern/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>/2023/09/25/distributed_%20transaction/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式基础知识点</title>
    <url>/2023/09/25/distributed_base/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/2023/09/25/distributed_clock/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式ID</title>
    <url>/2023/09/25/distributed_id/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式配置中心</title>
    <url>/2023/09/25/distributed_config/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>消息队列</title>
    <url>/2023/09/25/distributed_message_queue/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>/2023/09/25/distributed_redis/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Zookeeper</title>
    <url>/2023/09/25/distributed_zookeeper/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发</title>
    <url>/2023/09/25/java_%20concurrent/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>并发</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle</title>
    <url>/2023/09/25/java_%20gradle/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO</title>
    <url>/2023/09/25/java_%20io/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/2023/09/25/java_%20jvm/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java版本新特性</title>
    <url>/2023/09/25/java_%20new_feature/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础知识点</title>
    <url>/2023/09/25/java_base/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2023/09/25/java_maven/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/2023/09/25/java_mybatis/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring &amp; SpringBoot</title>
    <url>/2023/09/25/java_springboot/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池</title>
    <url>/2023/09/25/java_threadpool/</url>
    <content><![CDATA[<h1 id="线程池、连接池"><a href="#线程池、连接池" class="headerlink" title="线程池、连接池"></a>线程池、连接池</h1><span id="more"></span>

<h1 id="1-线程池"><a href="#1-线程池" class="headerlink" title="1 线程池"></a>1 线程池</h1><h2 id="1-1-线程池介绍"><a href="#1-1-线程池介绍" class="headerlink" title="1.1 线程池介绍"></a>1.1 线程池介绍</h2><p>顾名思义，线程池就是管理一系列线程的资源池，其提供了一种限制和管理线程资源的方式。每个线程池还维护一些基本统计信息，例如已完成任务的数量。</p>
<p>这里借用《Java 并发编程的艺术》书中的部分内容来总结一下使用线程池的好处：</p>
<ul>
<li><strong>降低资源消耗</strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</li>
<li><strong>提高响应速度</strong>。当任务到达时，任务可以不需要等到线程创建就能立即执行。</li>
<li><strong>提高线程的可管理性</strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</li>
</ul>
<p><strong>线程池一般用于执行多个不相关联的耗时任务，没有多线程的情况下，任务顺序执行，使用了线程池的话可让多个不相关联的任务同时执行。</strong></p>
<h2 id="1-2-Java-Executor框架"><a href="#1-2-Java-Executor框架" class="headerlink" title="1.2 Java Executor框架"></a>1.2 Java Executor框架</h2><p><code>Executor</code> 框架是 Java5 之后引进的，在 Java 5 之后，通过 <code>Executor</code> 来启动线程比使用 <code>Thread</code> 的 <code>start</code> 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题。</p>
<blockquote>
<p>this 逃逸是指在构造函数返回之前其他线程就持有该对象的引用，调用尚未构造完全的对象的方法可能引发令人疑惑的错误。可参考：<a href="https://zhuanlan.zhihu.com/p/477481115">https://zhuanlan.zhihu.com/p/477481115</a></p>
</blockquote>
<hr>
<p><code>Executor</code> 框架结构主要由三大部分组成：</p>
<ul>
<li>**任务(<code>Runnable</code> &#x2F;<code>Callable</code>)**：执行任务需要实现的 <strong><code>Runnable</code> 接口</strong> 或 <strong><code>Callable</code>接口</strong>。</li>
<li><strong>任务的执行(<code>Executor</code>)</strong></li>
<li><strong>异步计算的结果(<code>Future</code>)</strong></li>
</ul>
<h2 id="1-3-ThreadPoolExecutor-主要参数"><a href="#1-3-ThreadPoolExecutor-主要参数" class="headerlink" title="1.3 ThreadPoolExecutor 主要参数"></a>1.3 ThreadPoolExecutor 主要参数</h2><ul>
<li><strong><code>corePoolSize</code> :</strong> 任务队列未达到队列容量时，最大可以同时运行的线程数量。</li>
<li><strong><code>maximumPoolSize</code> :</strong> 任务队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li>
<li><strong><code>workQueue</code>:</strong> 新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，新任务就会被存放在队列中。</li>
</ul>
<p><code>ThreadPoolExecutor</code>其他常见参数 :</p>
<ul>
<li><strong><code>keepAliveTime</code></strong>:线程池中的线程数量大于 <code>corePoolSize</code> 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 <code>keepAliveTime</code>才会被回收销毁。</li>
<li><strong><code>unit</code></strong> : <code>keepAliveTime</code> 参数的时间单位。</li>
<li><strong><code>threadFactory</code></strong> :executor 创建新线程的时候会用到。</li>
<li><strong><code>handler</code></strong> :饱和策略。</li>
</ul>
<h2 id="1-4-饱和策略"><a href="#1-4-饱和策略" class="headerlink" title="1.4 饱和策略"></a>1.4 饱和策略</h2><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时，<code>ThreadPoolTaskExecutor</code> 定义一些策略:</p>
<ul>
<li>**<code>ThreadPoolExecutor.AbortPolicy</code>**：抛出 <code>RejectedExecutionException</code>来拒绝新任务的处理。</li>
<li>**<code>ThreadPoolExecutor.CallerRunsPolicy</code>**：调用执行自己的线程运行任务，也就是直接在调用<code>execute</code>方法的线程中运行(<code>run</code>)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。如果您的应用程序可以承受此延迟并且你要求任何一个任务请求都要被执行的话，你可以选择这个策略。</li>
<li>**<code>ThreadPoolExecutor.DiscardPolicy</code>**：不处理新任务，直接丢弃掉。</li>
<li>**<code>ThreadPoolExecutor.DiscardOldestPolicy</code>**：此策略将丢弃最早的未处理的任务请求。</li>
</ul>
<h2 id="1-5-线程池创建方式"><a href="#1-5-线程池创建方式" class="headerlink" title="1.5 线程池创建方式"></a>1.5 线程池创建方式</h2><p>（1）<strong>通过<code>ThreadPoolExecutor</code>构造函数来创建（推荐）</strong></p>
<p>（2）<strong>通过 <code>Executor</code> 框架的工具类 <code>Executors</code> 来创建。</strong></p>
<p>我们可以创建多种类型的 <code>ThreadPoolExecutor</code>：</p>
<ul>
<li>**<code>FixedThreadPool</code>**：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。</li>
<li><strong><code>SingleThreadExecutor</code>：</strong> 该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。</li>
<li><strong><code>CachedThreadPool</code>：</strong> 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。</li>
<li>**<code>ScheduledThreadPool</code>**：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。</li>
</ul>
<p>注：《阿里巴巴 Java 开发手册》强制线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 构造函数的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险（<code>Executors</code>创建的线程池，队列长度为Interger.MAX_VALUE，可能堆积大量的请求，导致 OOM）。</p>
<h2 id="1-6-阻塞队列"><a href="#1-6-阻塞队列" class="headerlink" title="1.6 阻塞队列"></a>1.6 阻塞队列</h2><p>不同的线程池会选用不同的阻塞队列，我们可以结合内置线程池来分析。</p>
<ul>
<li>容量为 <code>Integer.MAX_VALUE</code> 的 <code>LinkedBlockingQueue</code>（无界队列）：<code>FixedThreadPool</code> 和 <code>SingleThreadExector</code> 。由于队列永远不会被放满，因此<code>FixedThreadPool</code>最多只能创建核心线程数的线程。</li>
<li><code>SynchronousQueue</code>（同步队列）：<code>CachedThreadPool</code> 。<code>SynchronousQueue</code> 没有容量，不存储元素，目的是保证对于提交的任务，如果有空闲线程，则使用空闲线程来处理；否则新建一个线程来处理任务。也就是说，<code>CachedThreadPool</code> 的最大线程数是 <code>Integer.MAX_VALUE</code> ，可以理解为线程数是可以无限扩展的，可能会创建大量线程，从而导致 OOM。</li>
<li><code>DelayedWorkQueue</code>（延迟阻塞队列）：<code>ScheduledThreadPool</code> 和 <code>SingleThreadScheduledExecutor</code> 。<code>DelayedWorkQueue</code> 的内部元素并不是按照放入的时间排序，而是会按照延迟的时间长短对任务进行排序，内部采用的是“堆”的数据结构，可以保证每次出队的任务都是当前队列中执行时间最靠前的。<code>DelayedWorkQueue</code> 添加元素满了之后会自动扩容原来容量的 1&#x2F;2，即永远不会阻塞，最大扩容可达 <code>Integer.MAX_VALUE</code>，所以最多只能创建核心线程数的线程。</li>
</ul>
<h2 id="1-7-Runnable-vs-Callable"><a href="#1-7-Runnable-vs-Callable" class="headerlink" title="1.7 Runnable vs Callable"></a>1.7 <code>Runnable</code> vs <code>Callable</code></h2><p><code>Runnable</code>自 Java 1.0 以来一直存在，但<code>Callable</code>仅在 Java 1.5 中引入,目的就是为了来处理<code>Runnable</code>不支持的用例。**<code>Runnable</code> 接口**不会返回结果或抛出检查异常，但是 <strong><code>Callable</code> 接口</strong>可以。所以，如果任务不需要返回结果或抛出异常推荐使用 <strong><code>Runnable</code> 接口</strong>，这样代码看起来会更加简洁。</p>
<h2 id="1-8-execute-vs-submit"><a href="#1-8-execute-vs-submit" class="headerlink" title="1.8  execute() vs submit()"></a>1.8  <code>execute()</code> vs <code>submit()</code></h2><ul>
<li><code>execute()</code>方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否；</li>
<li><code>submit()</code>方法用于提交需要返回值的任务。线程池会返回一个 <code>Future</code> 类型的对象，通过这个 <code>Future</code> 对象可以判断任务是否执行成功，并且可以通过 <code>Future</code> 的 <code>get()</code>方法来获取返回值，<code>get()</code>方法会阻塞当前线程直到任务完成，而使用 <code>get（long timeout，TimeUnit unit）</code>方法的话，如果在 <code>timeout</code> 时间内任务还没有执行完，就会抛出 <code>java.util.concurrent.TimeoutException</code>。</li>
</ul>
<h2 id="1-9-shutdown-VSshutdownNow"><a href="#1-9-shutdown-VSshutdownNow" class="headerlink" title="1.9  shutdown()VSshutdownNow()"></a>1.9  <code>shutdown()</code>VS<code>shutdownNow()</code></h2><ul>
<li><strong><code>shutdown（）</code></strong> :关闭线程池，线程池的状态变为 <code>SHUTDOWN</code>。线程池不再接受新任务了，但是队列里的任务得执行完毕。</li>
<li><strong><code>shutdownNow（）</code></strong> :关闭线程池，线程池的状态变为 <code>STOP</code>。线程池会终止当前正在运行的任务，并停止处理排队的任务并返回正在等待执行的 List。</li>
</ul>
<h2 id="1-10-isTerminated-VS-isShutdown"><a href="#1-10-isTerminated-VS-isShutdown" class="headerlink" title="1.10  isTerminated() VS isShutdown()"></a>1.10  <code>isTerminated()</code> VS <code>isShutdown()</code></h2><ul>
<li><strong><code>isShutDown</code></strong> 当调用 <code>shutdown()</code> 方法后返回为 true。</li>
<li><strong><code>isTerminated</code></strong> 当调用 <code>shutdown()</code> 方法后，并且所有提交的任务完成后返回为 true</li>
</ul>
<h2 id="1-11-线程池和-ThreadLocal"><a href="#1-11-线程池和-ThreadLocal" class="headerlink" title="1.11 线程池和 ThreadLocal"></a>1.11 线程池和 ThreadLocal</h2><p>线程池和 <code>ThreadLocal</code>共用，可能会导致线程从<code>ThreadLocal</code>获取到的是旧值&#x2F;脏数据。这是因为线程池会复用线程对象，与线程对象绑定的类的静态属性 <code>ThreadLocal</code> 变量也会被重用，这就导致一个线程可能获取到其他线程的<code>ThreadLocal</code> 值。</p>
<p>可考虑使用<code>TransmittableThreadLocal</code>， 项目地址：<a href="https://github.com/alibaba/transmittable-thread-local">https://github.com/alibaba/transmittable-thread-local</a> 。</p>
<h1 id="2-连接池"><a href="#2-连接池" class="headerlink" title="2 连接池"></a>2 连接池</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>（1）<a href="https://javaguide.cn/java/concurrent/java-thread-pool-summary.html">https://javaguide.cn/java/concurrent/java-thread-pool-summary.html</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s监控</title>
    <url>/2023/09/25/k8s_monitor/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>k8s</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker</title>
    <url>/2023/09/25/k8s_docker/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>k8s</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>网络基础知识点</title>
    <url>/2023/09/25/network_base/</url>
    <content><![CDATA[<span id="more"></span>]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>todo</tag>
        <tag>网络</tag>
      </tags>
  </entry>
</search>
